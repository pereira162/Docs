#!/usr/bin/env python3
"""
üîç DEMONSTRA√á√ÉO DE BUSCA RAG COM V√çDEOS TRANSCRITOS
==================================================
Sistema de busca sem√¢ntica que combina:
- Texto extra√≠do de p√°ginas web
- Transcri√ß√µes completas de v√≠deos
- Busca unificada por similaridade sem√¢ntica
"""

import json
import numpy as np
import datetime
from typing import List, Dict, Any
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import os

class VideoRAGSearchEngine:
    """
    üîç Motor de busca RAG com suporte a conte√∫do de v√≠deo
    """
    
    def __init__(self, chunks_file: str):
        """
        Inicializa o motor de busca com chunks de texto e v√≠deo
        """
        print("üîç INICIALIZANDO MOTOR DE BUSCA RAG")
        print("=" * 50)
        
        # Carrega chunks
        self.chunks_file = chunks_file
        self.chunks = self._load_chunks()
        
        # Inicializa modelo de embedding
        print("ü§ñ Carregando modelo de embeddings...")
        self.model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')
        
        # Pr√©-computa embeddings
        print("üß† Computando embeddings dos chunks...")
        self.embeddings = self._compute_embeddings()
        
        # Estat√≠sticas
        text_chunks = len([c for c in self.chunks if c['type'] == 'text'])
        video_chunks = len([c for c in self.chunks if c['type'] == 'video'])
        
        print(f"‚úÖ Sistema inicializado:")
        print(f"   üìÑ Chunks de texto: {text_chunks}")
        print(f"   üé• Chunks de v√≠deo: {video_chunks}")
        print(f"   üî¢ Total: {len(self.chunks)}")
        print(f"   üß† Embeddings: {self.embeddings.shape}")
        print()
    
    def _load_chunks(self) -> List[Dict[str, Any]]:
        """
        Carrega chunks do arquivo JSON
        """
        if not os.path.exists(self.chunks_file):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {self.chunks_file}")
        
        with open(self.chunks_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        return data.get('chunks', [])
    
    def _compute_embeddings(self) -> np.ndarray:
        """
        Computa embeddings para todos os chunks
        """
        texts = []
        for chunk in self.chunks:
            if chunk['type'] == 'text':
                texts.append(chunk['content'])
            elif chunk['type'] == 'video':
                # Para v√≠deos, usa t√≠tulo + transcri√ß√£o
                video_text = f"{chunk['title']}: {chunk['content']}"
                texts.append(video_text)
        
        embeddings = self.model.encode(texts)
        return embeddings
    
    def search(self, query: str, top_k: int = 5, content_type: str = 'all') -> List[Dict[str, Any]]:
        """
        Busca sem√¢ntica nos chunks
        
        Args:
            query: Consulta de busca
            top_k: N√∫mero de resultados
            content_type: 'all', 'text', 'video'
        """
        print(f"üîç BUSCA: '{query}'")
        print(f"üìä Tipo: {content_type} | Top: {top_k}")
        print("-" * 50)
        
        # Computa embedding da query
        query_embedding = self.model.encode([query])
        
        # Calcula similaridades
        similarities = cosine_similarity(query_embedding, self.embeddings)[0]
        
        # Filtra por tipo de conte√∫do
        filtered_indices = []
        for i, chunk in enumerate(self.chunks):
            if content_type == 'all' or chunk['type'] == content_type:
                filtered_indices.append(i)
        
        # Ordena por similaridade
        filtered_similarities = [(i, similarities[i]) for i in filtered_indices]
        filtered_similarities.sort(key=lambda x: x[1], reverse=True)
        
        # Retorna top_k resultados
        results = []
        for i, (chunk_idx, similarity) in enumerate(filtered_similarities[:top_k]):
            chunk = self.chunks[chunk_idx].copy()
            chunk['similarity'] = similarity
            chunk['rank'] = i + 1
            results.append(chunk)
        
        return results
    
    def print_results(self, results: List[Dict[str, Any]]):
        """
        Exibe resultados formatados
        """
        for result in results:
            icon = "üé•" if result['type'] == 'video' else "üìÑ"
            similarity_percent = result['similarity'] * 100
            
            print(f"{icon} RESULTADO #{result['rank']} - {similarity_percent:.1f}% similaridade")
            print(f"   üìç Fonte: {result['source']}")
            
            if result['type'] == 'video':
                print(f"   üé¨ V√≠deo: {result['video_id']}")
                print(f"   ‚è∞ Tempo: {result['start_time']:.1f}s - {result['end_time']:.1f}s")
                print(f"   üéØ T√≠tulo: {result['title']}")
            
            # Limita o conte√∫do exibido
            content = result['content']
            if len(content) > 200:
                content = content[:200] + "..."
            
            print(f"   üí¨ Conte√∫do: {content}")
            print()
    
    def demo_searches(self):
        """
        Demonstra√ß√£o com v√°rias buscas
        """
        queries = [
            "como criar um projeto de arquitetura",
            "workflow de trabalho no AutoCAD",
            "personaliza√ß√£o de interface",
            "comandos b√°sicos de desenho",
            "ferramentas de dimensionamento"
        ]
        
        for query in queries:
            print("üéØ DEMONSTRA√á√ÉO DE BUSCA")
            print("=" * 60)
            
            # Busca geral
            results = self.search(query, top_k=3)
            self.print_results(results)
            
            # Busca s√≥ em v√≠deos
            print("üé• RESULTADOS APENAS DE V√çDEOS:")
            print("-" * 40)
            video_results = self.search(query, top_k=2, content_type='video')
            if video_results:
                self.print_results(video_results)
            else:
                print("‚ùå Nenhum v√≠deo encontrado para esta busca")
            
            print("\n" + "="*60 + "\n")
    
    def interactive_search(self):
        """
        Busca interativa
        """
        print("üîç BUSCA INTERATIVA RAG")
        print("=" * 40)
        print("Digite suas consultas (ou 'quit' para sair):")
        print()
        
        while True:
            query = input("üîç Busca: ").strip()
            
            if query.lower() in ['quit', 'sair', 'exit']:
                print("üëã Encerrando busca...")
                break
            
            if not query:
                continue
            
            try:
                results = self.search(query, top_k=5)
                self.print_results(results)
            except Exception as e:
                print(f"‚ùå Erro na busca: {e}")

def main():
    """
    Fun√ß√£o principal de demonstra√ß√£o
    """
    print("üéØ DEMONSTRA√á√ÉO SISTEMA RAG COM V√çDEOS")
    print("=" * 60)
    print("Sistema que combina busca em texto e transcri√ß√µes de v√≠deo")
    print()
    
    # Encontra o arquivo de chunks mais recente
    chunks_files = []
    for file in os.listdir('.'):
        if file.startswith('test_complete_autodesk') and os.path.isdir(file):
            for subfile in os.listdir(file):
                if subfile.startswith('all_chunks_rag_') and subfile.endswith('.json'):
                    chunks_files.append(os.path.join(file, subfile))
    
    if not chunks_files:
        print("‚ùå Nenhum arquivo de chunks encontrado!")
        print("Execute primeiro o web_scraper_video_extractor.py")
        return
    
    # Usa o arquivo mais recente
    chunks_file = max(chunks_files, key=os.path.getmtime)
    print(f"üìÅ Usando chunks: {chunks_file}")
    print()
    
    try:
        # Inicializa motor de busca
        search_engine = VideoRAGSearchEngine(chunks_file)
        
        # Demonstra√ß√£o autom√°tica
        search_engine.demo_searches()
        
        # Busca interativa
        search_engine.interactive_search()
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
